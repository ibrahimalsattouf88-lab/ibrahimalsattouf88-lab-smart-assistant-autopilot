name: Build, Test, and Deploy Apps

on: # Trigger this workflow manually from GitHub Actions UI
  workflow_dispatch:
    inputs:
      app_to_build:
        description: 'Select which app to build'
        required: true
        default: 'smart_assistant'
        type: choice
        options:
          - 'smart_assistant'
          - 'control_panel'
      build_type:
        description: 'Select build type (e.g., debug, release)'
        required: true
        default: 'release'
        type: choice
        options:
          - 'debug'
          - 'release'

env:
  FLUTTER_VERSION: '3.22.0' # Specify a stable Flutter version

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install dependencies for Smart Assistant App
        if: ${{ github.event.inputs.app_to_build == 'smart_assistant' }}
        run: |
          cd apps/smart_assistant
          flutter pub get

      - name: Install dependencies for Control Panel App
        if: ${{ github.event.inputs.app_to_build == 'control_panel' }}
        run: |
          cd apps/control_panel
          flutter pub get

      - name: Run tests for Smart Assistant App
        if: ${{ github.event.inputs.app_to_build == 'smart_assistant' }}
        run: |
          cd apps/smart_assistant
          flutter test

      - name: Run tests for Control Panel App
        if: ${{ github.event.inputs.app_to_build == 'control_panel' }}
        run: |
          cd apps/control_panel
          flutter test

      - name: Build and Deploy with Codemagic (Smart Assistant)
        if: ${{ github.event.inputs.app_to_build == 'smart_assistant' }}
        run: |
          # This step assumes Codemagic CLI is installed and configured.
          # For now, we'll just print a placeholder command.
          # In a real scenario, this would involve calling Codemagic API or CLI.
          echo "Triggering Codemagic build for Smart Assistant App (Workflow ID: ${{ secrets.CODEMAGIC_WORKFLOW_ID }})"
          # Example: codemagic-cli build start --workflow-id ${{ secrets.CODEMAGIC_WORKFLOW_ID }} --token ${{ secrets.CODEMAGIC_API_TOKEN }} --environment '{"BUILD_TYPE":"${{ github.event.inputs.build_type }}"}'
          # Note: CODEMAGIC_WORKFLOW_ID needs to be specific to the app being built.
          # This workflow will need to be refined once Codemagic setup is clearer.

      - name: Build and Deploy with Codemagic (Control Panel)
        if: ${{ github.event.inputs.app_to_build == 'control_panel' }}
        run: |
          echo "Triggering Codemagic build for Control Panel App (Workflow ID: ${{ secrets.CODEMAGIC_WORKFLOW_ID }})"
          # Example: codemagic-cli build start --workflow-id ${{ secrets.CODEMAGIC_WORKFLOW_ID }} --token ${{ secrets.CODEMAGIC_API_TOKEN }} --environment '{"BUILD_TYPE":"${{ github.event.inputs.build_type }}"}'
          # Note: CODEMAGIC_WORKFLOW_ID needs to be specific to the app being built.
          # This workflow will need to be refined once Codemagic setup is clearer.

      - name: Upload Build Artifacts (Placeholder)
        run: |
          echo "Build artifacts would be uploaded here."
          # This step would typically upload the APK/IPA files generated by Codemagic
          # to a designated delivery folder or GitHub Releases.

      - name: Send Telegram Notification (Placeholder)
        run: |
          echo "Sending Telegram notification about build status."
          # This step would use the TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID to send a message.

      - name: Send WhatsApp Notification (Placeholder)
        run: |
          echo "Sending WhatsApp notification about build status."
          # This step would use the WHATSAPP_ACCESS_TOKEN and WHATSAPP_PHONE_NUMBER_ID to send a message.

